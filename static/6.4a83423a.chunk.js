webpackJsonp([6],{1075:function(e,n,o){var t=o(0),a=o(61),r=o(17).PageRenderer;r.__esModule&&(r=r.default);var i=a({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:o(1097)}},componentWillMount:function(){},render:function(){return t.createElement(r,Object.assign({},this.props,{content:this.state.content}))}});i.__catalog_loader__=!0,e.exports=i},1097:function(e,n){e.exports="### Modal\n\n```table\nspan: 6\nrows:\n  - Prop: actionBar\n    Type: node\n    Notes: Optional. Renders an action bar at the top of the modal. Close button will be rendered by default.\n  - Prop: actionBarProps\n    Type: object\n    Notes: extra props passed to the actionBar wrapper\n  - Prop: containerProps\n    Type: object\n    Notes: extra props passed to the modal container\n  - Prop: contentProps\n    Type: object\n    Notes: extra props passed to the content wrapper\n  - Prop: bottomActionBar\n    Type: node\n    Notes: Optional. Renders an action bar at the bottom of the modal\n  - Prop: bottomActionBarProps\n    Type: object\n    Notes: extra props passed to the bottomActionBar wrapper\n  - Prop: children\n    Type: node\n    Notes: The modal's children\n  - Prop: deviceSize\n    Type: object\n    Notes: An object provided by the DeviceSize component\n  - Prop: isOpened\n    Type: bool\n    Notes: Optional. Default true. Indicates, if the modal is opened by default\n  - Prop: size\n    Type: small, medium, large\n    Notes: Optional. Default medium. The preferred size of the modal, adaptive for each screen size\n  - Prop: onRequestClose\n    Type: \"() => Promise<bool>\"\n    Notes: Optional. Allows to set custom close callback handler. May return false indicating that it is not allowed to close the modal\n  - Prop: onScroll\n    Type: func(Event)\n    Notes: Optional. Callback is fired when the user scrolls modal's content\n```\n\n### Default Modal with default action bars\n\n```react\nresponsive: true\n---\n<DeviceSizeProvider>\n    <Modal\n        onRequestClose={() => console.log('You shall not pass!')}\n    >\n        {Array(1000).fill('').map((_, i) => <div key={i}>Text Row {i}</div>)}\n    </Modal>\n</DeviceSizeProvider>\n```\n\n### Modal with custom action bars and long content\n\n```react\nresponsive: true\n---\n<DeviceSizeProvider>\n    <Modal\n        actionBar={\n            <div style={{ backgroundColor: 'white' }}>\n                <h1 style={{ padding: 0, margin: 0, fontSize: 16 }}>Demo Modal</h1>\n            </div>\n        }\n        bottomActionBar={\n            <div style={{ backgroundColor: 'white' }}>\n                <Button style={{ width: 'auto' }}>See Tickets</Button>\n            </div>\n        }\n    >\n        {Array(1000).fill('').map((_, i) => <div key={i}>Text Row {i}</div>)}\n    </Modal>\n</DeviceSizeProvider>\n```\n\n### Modal with custom action bars and short content\n\n```react\nresponsive: true\n---\n<DeviceSizeProvider>\n    <Modal\n        actionBar={\n            <div style={{ backgroundColor: 'white' }}>\n                <h1 style={{ padding: 0, margin: 0, fontSize: 16 }}>Demo Modal</h1>\n            </div>\n        }\n        bottomActionBar={\n            <div style={{ backgroundColor: 'white' }}>\n                <Button style={{ width: 'auto' }}>See Tickets</Button>\n            </div>\n        }\n    >\n        {Array(8).fill('').map((_, i) => <div key={i}>Text Row {i}</div>)}\n    </Modal>\n</DeviceSizeProvider>\n```\n"}});
//# sourceMappingURL=6.4a83423a.chunk.js.map