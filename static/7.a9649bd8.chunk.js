webpackJsonp([7],{1081:function(e,n,t){var i=t(0),o=t(62),s=t(16).PageRenderer;s.__esModule&&(s=s.default);var l=o({displayName:"WrappedPageRenderer",getInitialState:function(){return{content:t(1103)}},componentWillMount:function(){},render:function(){return i.createElement(s,Object.assign({},this.props,{content:this.state.content}))}});l.__catalog_loader__=!0,e.exports=l},1103:function(e,n){e.exports='### ListRow\n\nListRow Component with a standard variant and a variant with the link as shown below.\n\n### Props\n\n```table\nspan: 6\nrows:\n  - Prop: rowItem\n    Type: object\n    Notes: Required\n  - Prop: index\n    Type: number\n    Notes: Required\n  - Prop: onOverflowClick\n    Type: func\n    Notes: Required\n  - Prop: children\n    Type: node\n    Notes: Optional. Default is null.\n  - Prop: onExpandShow\n    Type: one of either "title" or "subTitle"\n    Notes: Optional. Default is "subTitles"\n  - Prop: onExpandItem\n    Type: "func({ index: number }): void"\n    Notes: Optional. This is called when a user clicks "expand row" chevron\n  - Prop: onCollapseItem\n    Type: "func({ index: number }): void"\n    Notes: Optional. This is called when a user clicks "collapse row" chevron\n```\n\n### ListContainer\n\nContainer Component which contains all the ListRows and is responsible for managing the expand or collapse state for the row.\n\n### Props\n\n```table\nspan: 6\nrows:\n  - Prop: children\n    Type: node\n    Notes: Optional. Default is null.\n  - Prop: onRowCollapse\n    Type: func\n    Notes: Optional.\n  - Prop: onModalClose\n    Type: func\n    Notes: Optional.\n  - Prop: expandMultiple\n    Type: boolean\n    Notes: Optional. If true, multiple list rows can be expanded simultaneously. If false, only a single list row can be expanded at one time. Default is false.\n```\n\n### RowItem Prop Table\n\n```table\nspan: 6\nrows:\n  - Prop: title\n    Type: String\n    Notes: Required\n  - Prop: subTitle\n    Type: String\n    Notes: Required\n  - Prop: dateTitle\n    Type: String\n    Notes: Required\n  - Prop: dateSubTitle\n    Type: String\n    Notes: Required\n  - Prop: url\n    Type: String\n    Notes: optional. Default is "".\n  - Prop: buttonText\n    Type: String\n    Notes: Required\n  - Prop: buttonVariant\n    Type: String\n    Notes: Optional. Determines button style variant. Possible variants are `standard`, `special`, `outline`, `transparent`. Default is `standard`\n  - Prop: variant\n    Type: String\n    Notes: Required. Value is one of ["standard", "withLink"]\n  - Prop: label\n    Type: String\n    Notes: Optional. Label text. Default is ""\n  - Prop: labelVariant\n    Type: Number\n    Notes: Optional. Determines label style variant. Possible variants are `default`, `positive`, `alert`. Default is `default`\n  - Prop: linkTitle\n    Type: String\n    Notes: Optional. Default is ""\n  - Prop: linkUrl\n    Type: String\n    Notes: Optional. Default is ""\n  - Prop: dateColor\n    Type: String\n    Notes: Optional. Default is "#262626"\n  - Prop: onClick\n    Type: func\n    Notes: Required\n```\n\n### Standard List Row\n\n```react\nresponsive: true\n---\n<ListContainer>\n  <ListRow\n    rowItem={{\n        ...listItems[0],\n        variant: "withLink",\n        linkTitle: "Ticket Options Available",\n        linkUrl: "",\n        linkSubTitle: "on Partner Site",\n        label: "On sale: MON \\u2022 AUG 27 \\u2022 10 AM",\n        labelVariant: "positive"\n    }}\n    index={0}\n    onOverflowClick={() => alert(\'Overflow Clicked\')}\n    onExpandItem={({index}) => alert(`Expand ${index}`)}\n    onCollapseItem={({index}) => alert(`Collapse ${index}`)}\n  />\n\n  <ListRow\n    rowItem={listItems[0]}\n    index={1}\n    onOverflowClick={() => alert(\'Overflow Clicked\')}\n    onExpandItem={({index}) => alert(`Expand ${index}`)}\n    onCollapseItem={({index}) => alert(`Collapse ${index}`)}\n  />\n </ListContainer>\n```\n\n### Multiple List Row with the Container\n\n```react\nresponsive: true\n---\n\n<ListContainer expandMultiple={true}>\n  <ListRow\n    rowItem={{\n            ...listItems[0],\n            variant: "withLink",\n            linkTitle: "Ticket Options Available",\n            linkUrl: "",\n            linkSubTitle: "on Partner Site"\n        }}\n    index={0}\n    onOverflowClick={()=>{}}\n  >\n    <ListRowOverflow>\n    {sections.map(section =>\n        <Section title={section.title} medium={MAX_COLUMNS / sections.length} key={section.key}>\n          {section.items.map(item =>\n          <SectionItem item={item} key={item.title}/>)}\n        </Section>\n        )}\n    </ListRowOverflow>\n </ListRow>\n\n  <ListRow rowItem={listItems[1]} index={1} onOverflowClick={()=>{}}>\n    <ListRowOverflow>\n      <Section title={sections[0].title} medium={MAX_COLUMNS / sections.length} key={sections[0].key}>\n          {sections[0].items.map(item =>\n          <SectionItem item={item} key={item.title}/>)}\n      </Section>\n       <Section title={sections[1].title} medium={MAX_COLUMNS / sections.length} key={sections[1].key}>\n          {sections[1].items.map(item =>\n          <SectionItem item={item} key={item.title}/>)}\n      </Section>\n    </ListRowOverflow>\n  </ListRow>\n\n\n  <ListRow rowItem={listItems[2]} index={2} onOverflowClick={()=>{}}>\n    <ListRowOverflow>\n     <Section title={sections[0].title} medium={MAX_COLUMNS / sections.length} key={sections[0].key}>\n          {sections[0].items.map(item =>\n          <SectionItem item={item} key={item.title}/>)}\n      </Section>\n       <Section title={sections[1].title} medium={MAX_COLUMNS / sections.length} key={sections[1].key}>\n          {sections[1].items.map(item =>\n          <SectionItem item={item} key={item.title}/>)}\n      </Section>\n      <Section title={sections[2].title} medium={MAX_COLUMNS / sections.length} key={sections[2].key}>\n          {sections[2].items.map(item =>\n          <SectionItem item={item} key={item.title}/>)}\n      </Section>\n    </ListRowOverflow>\n  </ListRow>\n\n  <ListRow rowItem={listItems[3]} index={3} onOverflowClick={()=>{}}>\n    <ListRowOverflow>\n     <Section title={sections[0].title} medium={MAX_COLUMNS / sections.length} key={sections[0].key}>\n          {sections[0].items.map(item =>\n          <SectionItem item={item} key={item.title}/>)}\n      </Section>\n       <Section title={sections[1].title} medium={MAX_COLUMNS / sections.length} key={sections[1].key}>\n          {sections[1].items.map(item =>\n          <SectionItem item={item} key={item.title}/>)}\n      </Section>\n      <Section title={sections[2].title} medium={MAX_COLUMNS / sections.length} key={sections[2].key}>\n          {sections[2].items.map(item =>\n          <SectionItem item={item} key={item.title}/>)}\n      </Section>\n    </ListRowOverflow>\n  </ListRow>\n\n</ListContainer>\n;\n```\n\n### Standard expanded List Row\n\n```react\nresponsive: true\n---\n<ListContainer>\n <ListRow rowItem={listItems[0]} index={0} onOverflowClick={()=>{}}>\n <ListRowOverflow>\n {sections.map(section =>\n    <Section title={section.title} large={MAX_COLUMNS / sections.length} key={section.key}>\n      {section.items.map(item =>\n      <SectionItem item={item} key={item.title}/>)}\n    </Section>\n    )}\n</ListRowOverflow>\n </ListRow>\n </ListContainer>\n```\n\n### List Row with Link\n\n```react\nresponsive: true\n---\n<ListContainer>\n <ListRow\n         rowItem={{\n           ...listItems[0],\n           variant: "withLink",\n           linkTitle: "Ticket Options Available",\n           linkUrl: "",\n           linkSubTitle: "on Partner Site"\n         }}\n         index={0}\n         onOverflowClick={()=>{}}\n       />\n </ListContainer>\n```\n\n### List Row with Label\n\n```react\nresponsive: true\n---\n<ListContainer>\n <ListRow\n    rowItem={{\n      ...listItems[0],\n      label: "custom label",\n    }}\n    index={0}\n    onOverflowClick={()=>{}}\n  >\n    <ListRowOverflow>\n      <Section title={sections[0].title} medium={MAX_COLUMNS / sections.length} key={sections[0].key}>\n        {sections[0].items.map(item =>\n        <SectionItem item={item} key={item.title}/>)}\n      </Section>\n       <Section title={sections[1].title} medium={MAX_COLUMNS / sections.length} key={sections[1].key}>\n        {sections[1].items.map(item =>\n        <SectionItem item={item} key={item.title}/>)}\n      </Section>\n    </ListRowOverflow>\n  </ListRow>\n  <ListRow\n    rowItem={{\n      ...listItems[0],\n      label: "On sale: MON \\u2022 AUG 27 \\u2022 10 AM",\n      labelVariant: "positive"\n    }}\n    index={1}\n    onOverflowClick={()=>{}}\n  >\n    <ListRowOverflow>\n      <Section title={sections[0].title} medium={MAX_COLUMNS / sections.length} key={sections[0].key}>\n        {sections[0].items.map(item =>\n        <SectionItem item={item} key={item.title}/>)}\n      </Section>\n       <Section title={sections[1].title} medium={MAX_COLUMNS / sections.length} key={sections[1].key}>\n        {sections[1].items.map(item =>\n        <SectionItem item={item} key={item.title}/>)}\n      </Section>\n    </ListRowOverflow>\n  </ListRow>\n  <ListRow\n    rowItem={{\n      ...listItems[0],\n      buttonText: "More Info",\n      buttonVariant: "outline",\n      label: "Sold out",\n      labelVariant: "alert"\n    }}\n    index={2}\n    onOverflowClick={()=>{}}\n  >\n    <ListRowOverflow>\n      <Section title={sections[0].title} medium={MAX_COLUMNS / sections.length} key={sections[0].key}>\n        {sections[0].items.map(item =>\n        <SectionItem item={item} key={item.title}/>)}\n      </Section>\n       <Section title={sections[1].title} medium={MAX_COLUMNS / sections.length} key={sections[1].key}>\n        {sections[1].items.map(item =>\n        <SectionItem item={item} key={item.title}/>)}\n      </Section>\n    </ListRowOverflow>\n  </ListRow>\n </ListContainer>\n```\n\n### List Row with Colored Date\n\n```react\nresponsive: true\n---\n\n<ListContainer>\n<ListRow\n        rowItem={{\n          ...listItems[0],\n          variant: "standard",\n          dateColor: "#C56BFF",\n        }}\n        index={0}\n        onOverflowClick={()=>{}}\n      />\n</ListContainer>\n```\n'}});
//# sourceMappingURL=7.a9649bd8.chunk.js.map